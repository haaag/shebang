#!/usr/bin/env bash

# ╻ ╻╺┳╸┏┳┓┏━┓╻ ╻
# ┗┳┛ ┃ ┃┃┃┣━┛┃┏┛
#  ╹  ╹ ╹ ╹╹  ┗┛
# usage:
#   $ ytmpv <URL>
#
# example:
#   $ ytmpv "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
#
# play a video from a given url using mpv with notifications and logging.

set -o errexit
set -o pipefail

PROG=$(basename "$0")
DEPS=(mpv curl perl)
XDG_CACHE_HOME="${XDG_CACHE_HOME:-$HOME/.cache}"
PROMPT="  ${PROG}>"
DBNAME="ytmpv.db"
DBPATH="${LOGS_PATH:-$HOME}/$DBNAME"

DEF_TITLE="err: no video title found"
DEF_CHANNEL="err: no video channel found"

function _logerr {
    printf "%s: %s\n" "$PROG" "$*" >&2
    exit 1
}

function _notifyme {
    local prog
    local mesg="<b>$1</b>"
    prog=$(echo "$PROG" | tr '[:lower:]' '[:upper:]')
    notify-send -i youtube "$prog" "$mesg"
}

function _notifyerr {
    local mesg="$1"
    _notifyme "$mesg"
    _logerr "$mesg"
}

function _has {
    local c
    local verbose=false
    if [[ $1 == '-v' ]]; then
        verbose=true
        shift
    fi
    for c in "$@"; do
        c="${c%% *}"
        if ! command -v "$c" &>/dev/null; then
            [[ "$verbose" == true ]] && _logerr "'$c' not found"
            return 1
        fi
    done
}

function _create_ytmpv_db {
    [[ -f "$DBPATH" ]] && _notifyerr "database '$DBPATH' already exists"
    sqlite3 "$DBPATH" <<EOF
    CREATE TABLE IF NOT EXISTS youtube (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      channel TEXT,
      title TEXT,
      url TEXT UNIQUE,
      date TEXT
    );
EOF

    _notifyme "database '$DBPATH' created"
}

function _logger {
    _has -v sqlite3
    local channel="$1"
    local title="$2"
    local url="$3"
    [[ ! -f "$DBPATH" ]] && _logerr "database '$DBNAME' not found"
    [[ -z "$channel" ]] && _notifyerr "no CHANNEL found"
    [[ -z "$title" ]] && _notifyerr "no TITLE found"
    [[ -z "$url" ]] && _notifyerr "no URL found"

    if [[ "$channel" == "$DEF_CHANNEL" && "$title" == "$DEF_TITLE" ]]; then
        return
    fi

    sqlite3 "$DBPATH" <<EOF
INSERT OR IGNORE INTO youtube (channel, title, url, date) VALUES ('$channel', '$title', '$url', datetime('now'));
EOF
}

function _usage {
    cat <<EOF
Usage: $PROG <URL>

    play a video from a given url

Options:
    -d, db      Create database
    -h, help    Show this help
EOF
}

function _get_html_content {
    local url="$1"
    [[ -z "$url" ]] && _notifyerr "no URL found"

    # checks if is a valid URL
    if ! curl -sL -I "$url" >/dev/null 2>&1; then
        _notifyerr "failed to retrieve the URL: '$url'"
    fi

    html_content=$(curl -sL "$url")

    echo "$html_content"
}

function _extract_title {
    local html="$1"
    [[ -z "$html" ]] && _notifyerr "no HTML content found"

    title=$(echo "$html_content" | perl -l -0777 -ne 'print $1 if /<title.*?>\s*(.*?)\s*<\/title/si')
    [[ -z "$title" ]] && title=$DEF_TITLE

    echo "$title"
}

function _extract_channel {
    local html="$1"
    [[ -z "$html" ]] && _notifyerr "no HTML content found"

    channel_name=$(echo "$html" | perl -l -0777 -ne 'print $1 if /<link itemprop="name" content="(.*?)"/')
    [[ -z "$channel_name" ]] && channel_name=$DEF_CHANNEL

    echo "$channel_name"
}

function _valid_url {
    local url="$1"
    [[ -z "$url" ]] && { _notifyerr "no URL found"; }

    if ! curl -sL -I "$url" >/dev/null 2>&1; then
        return 1
    fi

    return 0
}

function _get_vid_title_and_channel {
    local title

    # checks if is a valid URL
    if ! curl -sL -I "$url" >/dev/null 2>&1; then
        _notifyerr "failed to retrieve the URL: '$url'"
    fi

    html_content=$(curl -sL "$url")

    title=$(echo "$html_content" | perl -l -0777 -ne 'print $1 if /<title.*?>\s*(.*?)\s*<\/title/si')
    [[ -z "$title" ]] && title="err: failed to extract video title."

    channel_name=$(echo "$html_content" | perl -l -0777 -ne 'print $1 if /<link itemprop="name" content="(.*?)"/')
    # channel_name=$(curl -sL "$url" | perl -l -0777 -ne 'print $1 if /"ownerChannelName":"(.*?)"/si')
    [[ -z "$channel_name" ]] && channel_name="err: failed to extract channel name."

    echo "$title" "$channel_name"
}

function _logvideo {
    local url="$1"
    [[ -z "$url" ]] && { _notifyerr "no URL found"; }

    local html_content
    html_content=$(_get_html_content "$url")

    local title channel
    title=$(_extract_title "$html_content")
    channel=$(_extract_channel "$html_content")

    _logger "$channel" "$title" "$url"
    _notifyme "$title @ $channel"
}

function _play_it {
    local url="$1"
    [[ -z "$url" ]] && { _notifyerr "no URL found"; }

    url=$(_clean_url "$url")
    if _valid_url "$url"; then
        _logvideo "$url"
        setsid -f mpv --really-quiet "$url"
    fi
}

function _prompt_to_play {
    if ! _has "dmenu"; then
        _notifyerr "'dmenu' command not found"
    fi

    local url
    url=$(dmenu -h 22 -p "$PROMPT" </dev/null)
    [[ -z "$url" ]] && { _notifyerr "no URL found"; }

    _play_it "$url"
}

# clean up URL from youtube-local uri
function _clean_url {
    local url="$1"
    local prefix="http://localhost:8080/"
    [[ -z "$url" ]] && { _notifyerr "no URL found"; }

    if [[ $url == $prefix* ]]; then
        url="${url#"$prefix"}"
    fi

    echo "$url"
}

function main {
    _has -v "${DEPS[@]}"
    local url="${1:-$(_has xclip && xclip -o -sel clip)}"
    case "$url" in
    -h | --help | help) _usage ;;
    -d | --db | db) _create_ytmpv_db ;;
    *youtu.be* | *youtube.com*) _play_it "$url" ;;
    *) _prompt_to_play ;;
    esac
}

main "$@"
