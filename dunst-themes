#!/usr/bin/env bash

# ╺┳┓╻ ╻┏┓╻┏━┓╺┳╸
#  ┃┃┃ ┃┃┗┫┗━┓ ┃
# ╺┻┛┗━┛╹ ╹┗━┛ ╹
# themes helper
# requires: dunst

set -eou pipefail

# TODO)):
# - [ ] add option to create default settings.
# - [ ] add option to edit default settings.
# - [ ] create backup of original settings.

PROG=$(basename "$0")
DEPS=(dunst)
DOT="\u2022"

# files
DUNST_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"/dunst
THEMES="$DUNST_HOME"/themes
DEFAULTS="$DUNST_HOME"/dunst.defaults
DUNSTRC="$DUNST_HOME"/dunstrc
LIST=("$THEMES"/*)

HEADER="# DO NOT EDIT! This file will be overwritten by $PROG script.
# Customization should be done in '$DEFAULTS' instead.
# See '$PROG --help' for more information."

function usage {
    cat <<-_EOF
Usage: $PROG [Options]

    Set dunst themes

Options:
    -s, --set <name>      Set theme
    -r, --reload          Reload configuration
    -e, --edit            Edit defaults
    -c, --create          Create defaults settings
    -l, --list            List available themes
    -h, --help            Show this message

Locations:
    themes: $THEMES
    defaults: $DEFAULTS
_EOF
}

function _logerr {
    printf "%s: %s\n" "$PROG" "$*" >&2
    exit 1
}

function _logme {
    printf "%s: %s\n" "$PROG" "$1"
}

function _has {
    local c
    local verbose=false
    if [[ $1 == '-v' ]]; then
        verbose=true
        shift
    fi
    for c in "$@"; do
        c="${c%% *}"
        if ! command -v "$c" &>/dev/null; then
            [[ "$verbose" == true ]] && _logme "'$c' not found"
            return 1
        fi
    done
}

function _notifyme {
    local prog
    local mesg="<b>$1</b>"
    export DISPLAY=":0"
    local icon="${2:-gnome-settings-theme}"
    prog=$(echo "$PROG" | tr '[:lower:]' '[:upper:]')
    dunstify -i "$icon" "$prog" "$mesg"
}

function _start_dunst {
    if pidof dunst >/dev/null; then
        _logme "dunst is already running"
        return
    fi

    _notifyme "dunst is starting"
}

function _reload_dunst {
    local mesg="$1"

    if ! pidof dunst >/dev/null; then
        _start_dunst
        return
    fi

    pkill -HUP dunst >/dev/null
    local retcode="$?"

    if [[ "$retcode" -eq 0 && -n "$mesg" ]]; then
        _notifyme "$mesg"
    fi
}

function _backup_rc {
    local file="$1"
    mv "$file" "${file}.bk"
    _logerr "NotImplementedError"
}

function _get_theme {
    local name base result
    name="$1"

    for theme in "${LIST[@]}"; do
        base=$(basename "$theme")
        if [[ "$base" = "$name" ]]; then
            result="$theme"
        fi
    done

    echo "$result"
}

function _create_theme {
    local theme="$1"
    local name="$2"

    # if [[ -f "$DUNSTRC" ]]; then
    #     backup_rc "$DUNSTRC"
    # fi

    {
        echo "$HEADER"
        cat "$DEFAULTS"
        cat "$theme"
    } >"$DUNSTRC"

    _reload_dunst "<b>$name</b> loaded"
}

function _set_theme {
    local theme name
    name="$1"
    theme=$(_get_theme "$name")

    if [[ -z "$theme" ]]; then
        _logerr "theme '$1' not found"
    fi

    _create_theme "$theme" "$name"
}

function _list_themes {
    local theme
    printf "Usage: %s --set <name>" "$PROG"
    printf "\n\nThemes:\n"

    for theme in "${LIST[@]}"; do
        printf " $DOT %s\n" "$(basename "$theme")"
    done
    exit 0
}

function _edit_defaults {
    "${EDITOR:-vim}" "$DEFAULTS"
}

function _create_defaults {
    local current_rc
    # shellcheck disable=2034
    current_rc=$(cat "$DUNSTRC")

    # echo "$current_rc"
    _logerr "NotImplementedError"
}

function main {
    local opt="${1:-}"
    local theme="${2:-}"

    _has -v "${DEPS[@]}" || exit 1

    # exit if defaults not found
    if [[ ! -f "$DEFAULTS" ]]; then
        usage
        echo
        _logme "use '-c, --create'"
        _logerr "settings file '$DEFAULTS' not found"
    fi

    case "$opt" in
    -s | *set) _set_theme "$2" ;;
    -e | *edit) _edit_defaults ;;
    -c | *create) _create_defaults ;;
    -l | *list) _list_themes ;;
    -r | *reload) _reload_dunst "configuration <b>reloaded</b>" ;;
    *) usage ;;
    esac
}

main "$@"
