#!/usr/bin/env bash

# ┏━┓╻  ┏━┓┏━┓┏┳┓
# ┣━┫┃  ┣━┫┣┳┛┃┃┃
# ╹ ╹┗━╸╹ ╹╹┗╸╹ ╹
# set alarm

PROG="${0##*/}"
DURATION="$1"
MESG="${2:-Alarm}"
ICON=""
DEPS=(notify-send dmenu mpv)

# files
ALARM="$HOME/bin/assets/alarm-beepbeep.mp3"
PIDFILE="/tmp/$PROG.pid"
TIMEFILE="/tmp/$PROG.time"
MPVPID="/tmp/$PROG.mpv"

# TODO)):
# - [ ] add support for multiple alarms (unique names)

function log_err {
    local msg="$1"
    printf "%s: %s\n" "$PROG" "$msg" >&2
    exit 1
}

function send_notification {
    declare -a notify_args=(-r 888 --icon="alarm-timer")
    prog=$(echo "$PROG" | tr '[:lower:]' '[:upper:]')
    notify_args+=("$prog")
    notify-send "${notify_args[@]}" "$*"
}

function check_deps {
    for dep in "${DEPS[@]}"; do
        if ! command -v "$dep" >/dev/null; then
            err_msg="'$dep' not found"
            send_notification "$err_msg"
            log_err "$err_msg"
        fi
    done

    if [[ ! -e "$ALARM" ]]; then
        err_msg="alarm file not found: $ALARM"
        send_notification "$err_msg"
        log_err "$err_msg"
    fi

}

function pre_exit {
    printf "%s: %s\n" "$PROG" "cleaning up..."
    rm -f "$TIMEFILE"
    rm -f "$PIDFILE"
    rm -f "$MPVPID"
    send_notification "alarm finished"
    exit 0
}

function usage {
    cat <<-EOF
Usage: $PROG [[+|-<duration>]]

    Sets a simple alarm

Options:
    status          Show current status
    cancel, stop    Remove current alarm
EOF
}

function interpret_time {
    local input last_char time
    if [[ ${#1} -eq 1 ]]; then
        input="${1}m"
    else
        input="$1"
    fi

    last_char="${input: -1}"
    time="${input:0:-1}"

    if [[ "$last_char" == "m" ]]; then
        time=$((time * 60))
    elif [[ "$last_char" == "s" ]]; then
        time=$((time))
    elif [[ "$last_char" == "h" ]]; then
        time=$((time * 60 * 60))
    else
        exit 130
    fi

    echo "$time"
}

function cancel_timer {
    local pid

    if [[ -e "$MPVPID" ]]; then
        local mpvpid
        mpvpid=$(cat "$MPVPID")
        kill -9 "$mpvpid" &>/dev/null
    fi

    if [[ ! -e "$PIDFILE" ]]; then
        return
    fi

    pid=$(cat "$PIDFILE")
    echo "$PROG: timer with pid=$pid cancelled"
    kill -9 "$pid" &>/dev/null

    pre_exit
}

function save_pid {
    echo "$1" | tee "$PIDFILE" >/dev/null
}

function save_timestamp {
    local time="$1"
    echo "$time" | tee "$TIMEFILE" >/dev/null
}

function get_timestamp {
    cat "$TIMEFILE"
}

function update_timestamp {
    echo "${1:-0}" | tee "$TIMEFILE" >/dev/null
}

function update_time {
    local time new_time current
    if [[ ! -e "$TIMEFILE" ]]; then
        err_msg="no alarm found"
        send_notification "$err_msg"
        log_err "$err_msg"
    fi
    time=$(interpret_time "${1:-0}")
    current=$(get_timestamp)
    new_time=$((current + time))
    update_timestamp "$new_time"
}

function show_status {
    local current time result
    local time_diff_hours time_diff_minutes time_diff_seconds

    if [[ ! -f "$TIMEFILE" ]]; then
        return
    fi

    current=$(date +%s)
    time=$(get_timestamp)
    time_diff=$((time - current))

    if [[ "$time_diff" -lt 0 ]]; then
        return
    fi

    time_diff=${time_diff#-}

    if [[ $time_diff -ge 3600 ]]; then
        time_diff_hours=$((time_diff / 3600))
        time_diff=$((time_diff % 3600))
        time_diff_minutes=$((time_diff / 60))
        time_diff_seconds=$((time_diff % 60))
        result="${time_diff_hours}h ${time_diff_minutes}m ${time_diff_seconds}s"
    elif [[ $time_diff -ge 60 ]]; then
        time_diff_minutes=$((time_diff / 60))
        time_diff_seconds=$((time_diff % 60))
        result="${time_diff_minutes}m ${time_diff_seconds}s"
    else
        result="${time_diff}s"
    fi

    echo "$ICON $result"
}

function sound_the_alarm {
    send_notification "alarm with duration=$duration"
    mpv "$ALARM" --loop-file=10 --no-resume-playback >/dev/null 2>&1 &
    mpv_pid=$!
    echo "$mpv_pid" >"$MPVPID"
}

function set_alarm {
    trap pre_exit SIGTERM

    local duration current current_time
    duration="$1"
    current=$(date +%s)
    duration=$(interpret_time "$duration")
    current_time=$((current + duration))
    save_timestamp "$current_time"

    send_notification "setting alarm for $(show_status)"

    while true; do
        current=$(date +%s)
        time=$(get_timestamp)
        time_diff=$((current - time))
        time_diff=${time_diff#-}
        if [[ $time_diff -le 0 ]]; then
            break
        fi
        sleep 1s
    done

    sound_the_alarm
}

function get_duration {
    local icon=""
    DURATION=$(: | dmenu -i -p "$icon Duration:")
    echo "$DURATION"
}

function main {
    check_deps

    local pid

    case "${1-}" in
    -h | --help)
        usage
        exit 1
        ;;
    +*)
        update_time "$@"
        exit 0
        ;;
    -*)
        update_time "$@"
        exit 0
        ;;
    "status")
        show_status
        exit
        ;;
    cancel | stop | kill)
        cancel_timer
        exit 0
        ;;
    help)
        usage
        exit 1
        ;;
    *) ;;
    esac

    if [[ -z "$DURATION" ]]; then
        DURATION=$(get_duration)
    fi

    [[ -z "$DURATION" ]] && exit 1

    if [[ "$DURATION" =~ ^(cancel|stop|kill)$ ]]; then
        cancel_timer
    fi

    pid=$$
    save_pid "$pid"
    set_alarm "$DURATION" "$MESG"
}

main "$@"
