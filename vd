#!/usr/bin/env bash
#
# Void linux
# https://docs.voidlinux.org/xbps/index.html
#
# The X Binary Package System
# Fast package manager that has been designed and implemented from scratch.
# XBPS is managed by the Void Linux team and developed at
# https://github.com/void-linux/xbps

set -o errexit
set -o pipefail

# Always ask for password
sudo --askpass --reset-timestamp

# xbps-query -p install-date -s '' | sort -k2
# xbps-query -p install-date -s '' | sort -t: -k2 | column -t -s: -o: | grep -e "${1:-.}"

PROG="${0##*/}"
LOGGER="${LOGS_PATH:-$HOME/dcs/log/}/void.log"
BULLET="\u2022"

# Icons
declare -A ICONS
ICONS[install]="" # ""
ICONS[search]=""
ICONS[update]=""
ICONS[uninstall]=""
ICONS[clean]=""
ICONS[query]=""
ICONS[help]=""
ICONS[exit]=""

# Style
BOLD=$(tput bold)
DIM=$(tput dim)
RESET="$(tput sgr0)"
# Colors
BLUE=$(tput setaf 4)
RED=$(tput setaf 1)
CYAN=$(tput setaf 6)
MAGENTA=$(tput setaf 5)

function _notifyme {
    local icon="dialog-error-symbolic.svg"
    notify-send --icon="$icon" "$1" "$2"
}

function _logerr {
    from="${1:-LOG}"
    shift
    mesg="$*"
    date=$(date +"%Y-%m-%d::%H:%M:%S")
    echo "[$date]::[$PROG]::[$from]::${mesg}" | tee -a "${LOGGER}" >/dev/null
}

function _has {
    local c
    local verbose=false
    if [[ $1 == '-v' ]]; then
        verbose=true
        shift
    fi
    for c in "$@"; do
        c="${c%% *}"
        if ! command -v "$c" &>/dev/null; then
            [[ "$verbose" == true ]] && _logerr "$c not found"
            return 1
        fi
    done
}

function _titleme {
    printf "%b%bVoid%b %s\n\n" "${BOLD}" "${BLUE}" "${RESET}" "${1}"
}

function _preview {
    local i
    for i in "$@"; do
        version=${i##*-}
        pkg=${i%-*}
        echo -e " ${BULLET} ${MAGENTA}${pkg}${RESET} ${DIM}${version}${RESET}"
    done
    echo
}

function _warn {
    local i
    for i in "$@"; do
        version=${i##*-}
        pkg=${i%-*}
        echo -e " ${BULLET}${RED} ${pkg}${RESET} ${DIM}${version}${RESET}"
    done
    echo
}

function _xbps_installed_pkgs {
    packages=$(xbps-query -s "")
    echo "$packages"
}

function _xbps_all_pkgs {
    packages=$(xbps-query -Rs "*")
    echo "$packages"
}

function _xbps_update {
    _titleme "${BLUE}Syncing repositories${RESET}"
    sudo xbps-install -Su
}

function _get_fzf_defaults {
    local height="${1:-45%}"
    declare -a defaults=(
        --border=sharp
        --layout=reverse-list
        --ansi
        --no-preview
    )

    if [[ -n "$TMUX" ]]; then
        defaults+=(--tmux "center,${height}%")
    else
        defaults+=(--height="${height}%")
    fi

    printf '%s\n' "${defaults[@]}"
}

function _install {
    local selected fzf_opts
    local query="${1:-}"

    mapfile -t fzf_opts < <(_get_fzf_defaults "80")
    fzf_opts+=(--multi)
    fzf_opts+=(--query="$query")
    fzf_opts+=(--prompt="${ICONS[install]} Packages> ")
    fzf_opts+=(--marker=" ")
    fzf_opts+=(--preview='xbps-query -R {}')
    fzf_opts+=(--border-label="<Available Packages>")
    fzf_opts+=(--preview-label='[ Package Information ]')
    fzf_opts+=(--preview-label-pos='0:bottom')
    fzf_opts+=(--color header:italic)
    fzf_opts+=(--header 'Press CTRL-/ to toggle package information')

    mapfile -t selected < <(xbps-query -Rs "$query" | awk '{print $2}' | fzf "${fzf_opts[@]}")
    if [[ "${#selected[@]}" -eq 0 ]]; then
        exit 1
    fi

    _titleme "${CYAN}Install${RESET}"
    _preview "${selected[@]}"

    # installation
    sudo xbps-install -Su "${selected[@]}"
    retcode=$?
    if [[ $retcode -eq 0 ]]; then
        _logerr "INSTALL		" "${selected[*]}"
    fi
}

function _uninstall {
    local selected fzf_opts
    local query="${1:-}"

    mapfile -t fzf_opts < <(_get_fzf_defaults "80")
    fzf_opts+=(--multi)
    fzf_opts+=(--query="$query")
    fzf_opts+=(--prompt="${ICONS[uninstall]} Packages> ")
    fzf_opts+=(--marker=" ")
    fzf_opts+=(--preview='xbps-query -f {}')
    fzf_opts+=(--border-label="<Installed Packages>")
    fzf_opts+=(--preview-label='[ Package Information ]')
    fzf_opts+=(--preview-label-pos='0:bottom')
    fzf_opts+=(--color header:italic)
    fzf_opts+=(--header 'Press CTRL-/ to toggle package information')

    mapfile -t selected < <(_xbps_installed_pkgs | awk '{ print $2 }' | fzf "${fzf_opts[@]}")
    if [[ "${#selected[@]}" -eq 0 ]]; then
        exit 1
    fi

    _titleme "${RED}Uninstalling packages${RESET}"
    _warn "${selected[@]}"

    # uninstall
    sudo xbps-remove -R "${selected[@]}"
    retcode=$?
    if [[ $retcode -eq 0 ]]; then
        _logerr "UNINSTALL	" "${selected[@]}"
    fi
}

function _search {
    local fzf_opts selected
    # TODO: Improve display.
    # [ ] pkg name and version separated
    # [ ] pkg description new line
    local query="${1-""}"

    mapfile -t fzf_opts < <(_get_fzf_defaults "80")
    fzf_opts+=(--prompt="${ICONS[search]} Packages> ")
    fzf_opts+=(--preview='xbps-query -R {}')
    fzf_opts+=(--border-label="<Searching Packages>")
    fzf_opts+=(--preview-label='[ Package Information ]')
    fzf_opts+=(--preview-label-pos='0:bottom')
    fzf_opts+=(--color header:italic)
    fzf_opts+=(--header 'Press CTRL-/ to toggle package information')

    selected=$(xbps-query -Rs "$query" | awk '{print $2}' | fzf "${fzf_opts[@]}")
    if [[ -z "$selected" ]]; then
        exit 1
    fi
}

function query {
    local selected
    selected=$(xbps-query -l | awk '{ print $2 }' | fzf --tmux "center,80%" \
        --preview='xbps-query -f {}' \
        --preview-label='[ Package Files ]' \
        --preview-label-pos='0:bottom')

    if [[ -z "$selected" ]]; then
        exit 1
    fi

    xbps-query -f "$selected"
}

function clean {
    _titleme "${CYAN}Cleaning obsolete binary packages and orphans packages${RESET}"
    sudo xbps-remove -Oo
}

function show_log {
    ${EDITOR:-vim} "${LOGGER}"
}

function _usage {
    cat <<-_EOF
Usage: $PROG [command]

XBPS helper for Void Linux

Commands:
    -u, update          Syncs repositories
    -i, install         Install packages
    -U, uninstall       Uninstall packages
    -s, search          Search packages
    -q, query           Query packages
    -c, clean           Clean obsolete/orphans
    -l, log             Show log
    -h, help            Show this help
_EOF
    exit
}

function menu {
    local command fzf_opts
    declare -a options=()

    options+=("${ICONS[install]} install")
    options+=("${ICONS[search]} search")
    options+=("${ICONS[update]} update")
    options+=("${ICONS[uninstall]} uninstall")
    options+=("${ICONS[clean]} clean")
    options+=("${ICONS[query]} query")
    options+=("${ICONS[help]} help")
    options+=("${ICONS[exit]} exit")

    mapfile -t fzf_opts < <(_get_fzf_defaults "40")
    fzf_opts+=(--prompt="XBPS> ")
    fzf_opts+=(--pointer='→')
    fzf_opts+=(--border-label='<XBPS Helper>')
    fzf_opts+=(--preview-label='[ Package Information ]')

    command=$(printf '%s\n' "${options[@]}" | fzf "${fzf_opts[@]}")

    (printf '%s\n' "${options[@]}" | grep -x -q "$command") &&
        main "$(echo "$command" | cut -d' ' -f2)"
}

function main {
    _has -v fzf

    case "$1" in
    -u | update) _xbps_update ;;
    -i | install) shift && _install "$@" ;;
    -U | uninstall) shift && _uninstall "$@" ;;
    -q | query) shift && query "$@" ;;
    -s | search) shift && _search "$@" ;;
    -c | clean) clean ;;
    -l | log) show_log ;;
    -h | help) _usage ;;
    exit) exit 0 ;;
    *) menu ;;
    esac
}

if [[ "${1-}" =~ ^-*h(elp)?$ ]]; then
    _usage
fi

main "$@"
