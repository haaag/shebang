#!/usr/bin/env bash

# ┏━╸╻╻  ┏━╸┏━┓
# ┣╸ ┃┃  ┣╸ ┗━┓
# ╹  ╹┗━╸┗━╸┗━┛
# simple file-selector and share with <nnn> [<dragon-drop> | <localsend>]
# deps: <nnn> <dragon-drop> <localsend> <exiftool> <openssl> <setsid>
# when selecting images, <exiftool> is used to clean EXIF.

set -euo pipefail

# TODO: functions `dragon-drop` and `localsend` should be split, they are
# almost the same.

PROG="${0##*/}"
TMPDIRECTORY="$(mktemp -t -d "$PROG.XXXXXX")"
TMPFILE="${TMPDIRECTORY}/${PROG}.file"

# shellcheck source=/dev/null
[[ -f "$HOME/.config/shell/nnn.sh" ]] && . "$HOME/.config/shell/nnn.sh"

function _usage {
    cat <<-EOF
Usage: $PROG [COMMAND]

    Drop files with <dragon-drop>
    Send files with <localsend>

Commands:
    -d, --drag      Drag and drop files
    -s, --send      Send files locally
EOF
}

function _logme {
    printf "%s: %s\n" "$PROG" "$1"
}

function _has {
    local verbose=false
    local c
    if [[ $1 == '-v' ]]; then
        verbose=true
        shift
    fi
    for c in "$@"; do
        c="${c%% *}"
        if ! command -v "$c" &>/dev/null; then
            [[ "$verbose" == true ]] && _logerr "'$c' not found"
            return 1
        fi
    done
}

function _logerr {
    local msg="$1"
    _notifyme "$msg"
    printf "%s: %s\n" "$PROG" "$msg" >&2
    exit 1
}

function _notifyme {
    _has -v notify-send || return
    local prog
    local mesg="<b>$1</b>"
    prog=$(echo "$PROG" | tr '[:lower:]' '[:upper:]')
    notify-send -i "gnome-user-share" "$prog" "$mesg"
}

function _select_files {
    _has -v nnn
    nnn -p "$TMPFILE"
}

function _is_image {
    local file="${1:-}"
    [[ ! -e "$file" ]] && _logerr "'$file' not found"
    file --mime-type "$file" | grep -qE 'image/'
}

function _create_tmpfile {
    _has -v openssl
    local file="${1:-}"
    [[ ! -e "$file" ]] && _logerr "'$file' not found"
    local ext="${file##*.}"
    local newfile
    newfile="$(openssl rand -hex 8).${ext}"

    echo "${TMPDIRECTORY}/${newfile}"
}

function _clean_image_exif {
    _has -v exiftool
    local file="${1:-}"
    [[ ! -e "$file" ]] && _logerr "'$file' not found"
    if ! _is_image "$file"; then
        echo "${file}"
        return
    fi

    local newfile
    newfile=$(_create_tmpfile "${file}")

    cp -v "${file}" "${newfile}" >/dev/null
    exiftool -all= -overwrite_original "${newfile}" &>/dev/null
    echo "${newfile}"
}

function _dragon_drop {
    _has -v dragon-drop setsid

    local inputs
    # if caller gave us one existing file, use that…
    if [[ -n ${1:-} && -f ${1:-} ]]; then
        inputs=("$1")
    else
        # otherwise let user select files
        _select_files || return
        [[ ! -s $TMPFILE ]] && return 1
        mapfile -t inputs <"$TMPFILE"
    fi

    # process each file: clean EXIF if image, log, collect
    local out cleaned
    for f in "${inputs[@]}"; do
        if _is_image "$f"; then
            cleaned=$(_clean_image_exif "$f")
            _logme "[+] cleaning EXIF: $(basename "$f") → $cleaned"
            out+=("$cleaned")
        else
            out+=("$f")
        fi
    done

    _notifyme "Sharing ${#out[@]} files with dragon-drop..."
    if ((${#out[@]} == 1)); then
        setsid -f dragon-drop --and-exit "${out[0]}"
    else
        setsid -f dragon-drop --and-exit --stdin --on-top \
            <<<"$(printf '%s\n' "${out[@]}")"
    fi
}

function _localsend {
    _has -v localsend setsid

    # collect inputs: arguments or via _select_files
    local inputs=("$@")
    if ((${#inputs[@]} == 0)); then
        _select_files || return
        mapfile -t inputs <"$TMPFILE"
    fi

    # clean EXIF on images, build cleaned list
    local out cleaned
    for f in "${inputs[@]}"; do
        if _is_image "$f"; then
            cleaned=$(_clean_image_exif "$f")
            _logme "[+] cleaning EXIF: $(basename "$f") → $cleaned"
            out+=("$cleaned")
        else
            out+=("$f")
        fi
    done

    _notifyme "Sending ${#out[@]} files with localsend..."
    setsid -f localsend "${out[@]}"
}

# function _preexit {
#     if [[ -d "$TMPDIRECTORY" ]]; then
#         rm -rf "$TMPDIRECTORY" 2>/dev/null
#     fi
#     if [[ -f "$TMPFILE" ]]; then
#         rm "$TMPFILE" 2>/dev/null
#     fi
# }
#

# trap _preexit EXIT SIGTERM

function main {
    case "${1:-}" in
    -s | --send)
        shift
        _localsend "$@"
        ;;
    -h | --help) _usage ;;
    *) _dragon_drop "$@" ;;
    esac
}

main "$@"
