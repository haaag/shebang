#!/usr/bin/env bash

# ┏━╸┏━┓╻ ╻┏━╸┏━┓┏━╸┏━┓
# ┃  ┣━┛┃ ┃┣╸ ┣┳┛┣╸ ┃┓┃
# ┗━╸╹  ┗━┛╹  ╹┗╸┗━╸┗┻┛
# manage CPU frequency scaling
# * displays available scaling modes
# * displays current scaling governor
# * set scaling governor with menu
# deps: <sudo>

set -eou pipefail

PROG=$(basename "$0")
AVAILABLE="/sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors"
CURRENT=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor)
GOVERNOR=(/sys/devices/system/cpu/cpu*/cpufreq/scaling_governor)

# always ask password
sudo --askpass --reset-timestamp

# menu
MENU=
PROMPT=" $PROG> "
declare -a MENU_OPTS=()

# colors
RED=$(tput setaf 1)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
BOLD=$(tput bold)
WHITE=$(tput setaf 7)
RESET="$(tput sgr0)"

function _logerr {
    local msg="$1"
    printf "%s: %s\n" "$PROG" "$msg" >&2
    exit 1
}

function _logme {
    local msg="$1"
    local color="${2:-$BLUE}"
    printf "%s: %b%s%b\n" "$PROG" "$color" "$msg" "$RESET"
}

function _in_terminal {
    if [[ ! -t 1 ]]; then
        return 1
    fi
    return 0
}

function _has {
    local verbose=false
    if [[ $1 == '-v' ]]; then
        verbose=true
        shift
    fi
    for c in "$@"; do
        c="${c%% *}"
        if ! command -v "$c" &>/dev/null; then
            [[ "$verbose" == true ]] && _logerr "'$c' dependency not found"
            return 1
        fi
    done
}

function _help_modes {
    local scaling_available
    IFS=" " read -r -a scaling_available <<<"$(cat "$AVAILABLE")"
    for available in "${scaling_available[@]}"; do
        printf "    - %s\n" "$available"
    done
}

function _notifyme {
    if [[ -z "$DISPLAY" ]]; then
        _logme "no display found"
        return
    fi

    _has "notify-send" || exit 1

    local prog
    local mesg="<b>$1</b>"
    local icon="${2:-cpu}"
    local hints="string:x-canonical-private-synchronous:cpufreq"
    prog=$(echo "$PROG" | tr '[:lower:]' '[:upper:]')
    notify-send -r 666 -a "$PROG" -i "$icon" "$prog" "$mesg" -h "$hints"
}

function _get_notify_icon {
    local mode="$1"
    if [[ "$mode" = "performance" ]]; then
        echo "power-profile-performance-symbolic"
        return
    fi

    echo "power-profile-power-saver-symbolic"
    return
}

function _mode_available {
    local mode="$1"
    local scaling_available available
    IFS=" " read -r -a scaling_available <<<"$(cat "$AVAILABLE")"

    for available in "${scaling_available[@]}"; do
        if [[ "$mode" == "$available" ]]; then
            _logme "mode '${mode}' is available" "$MAGENTA"
            return 0
        fi
    done

    _logme "mode '$mode' not available" "$RED"
    mode_list

    return 1
}

function _mode_list {
    local scaling_available
    IFS=" " read -r -a scaling_available <<<"$(cat "$AVAILABLE")"
    _logme "available modes"
    for available in "${scaling_available[@]}"; do
        printf "  - %b%s%b\n" "$MAGENTA" "$available" "$RESET"
    done
}

function _mode_check {
    local mode="$1"

    [[ -z "$mode" ]] && _logme "err mode not found" "$RED" && exit 130

    if ! _mode_available "$mode"; then
        return 1
    fi

    return 0
}

function _mode_set {
    local mode="${1:-}"

    if ! _mode_check "$mode"; then
        return 1
    fi

    if [[ "$mode" = "$CURRENT" ]]; then
        _logme "already in profile: $mode"
        _notifyme "current: <i>$mode</i>" "$(_get_notify_icon "$mode")"
        return
    fi

    _logme "setting to '$mode' mode" "$BLUE"
    echo "$mode" | sudo -p "[sudo] setting to '$mode'  : " tee "${GOVERNOR[@]}" >/dev/null
    _notifyme "setting profile: <i><b>$mode</b></i>" "$(_get_notify_icon "$mode")"
}

function _current {
    _logme "$CURRENT"
}

function _prompt {
    local color="$1"
    local mesg="$2"
    echo -ne "${color}${BOLD}${mesg}${RESET}"
}

function _menu {
    local governors
    IFS=" " read -r -a governors <<<"$(cat "$AVAILABLE")"

    while true; do
        count=1

        _prompt "${WHITE}" "select mode:\n"
        echo
        # show options
        for gov in "${governors[@]}"; do
            printf "  %s. %s\n" "$count" "$gov"
            count=$((count + 1))
        done

        _prompt "${BLUE}" "\nenter choice: "
        read -r CHOSEN

        # set mode
        case "$CHOSEN" in
        [1-9] | [1-9][0-9] | [1-9][0-9][0-9])
            _mode_set "${governors[$((CHOSEN - 1))]}"
            break
            ;;
        *) ;;
        esac
        clear
    done
}

function _dialog {
    local scaling_available selection

    _has "$MENU" || {
        _notifyme "'$MENU' not found"
        exit 1
    }

    IFS=" " read -r -a scaling_available <<<"$(cat "$AVAILABLE")"

    selection=$(printf "%s\n" "${scaling_available[@]}" | "$MENU" "${MENU_OPTS[@]}")
    [[ -z "$selection" ]] && _logerr "action aborted"
    _mode_set "$selection"
}

function usage {
    cat <<-_EOF
usage: $PROG [OPTIONS]

    Sets the cpu scaling mode

available:
$(_help_modes)

options:
    -s, --set           Set mode <MODE>
    -c, --current       Display current governor
    -m, --menu          Display governors to chose
    -d, --dialog        Display a dialog to chose from
    -h, --help          Display this help and exit
_EOF
}

function main {
    [[ ! -f "$AVAILABLE" ]] && {
        _logme "no available governors" "$RED"
        _logerr "'$AVAILABLE' not found"
    }

    if _in_terminal && _has fzf; then
        MENU=fzf
        MENU_OPTS+=(--tmux "center,40%")
        MENU_OPTS+=(--prompt="$PROMPT")
    else
        MENU=dmenu
        MENU_OPTS+=(-sb '#83a598')
        MENU_OPTS+=(-p "$PROMPT")
    fi

    case "${1-}" in
    -s | *set) shift && _mode_set "$@" ;;
    -c | *current) _current ;;
    -m | *menu) _menu ;;
    -d | *dialog) _dialog ;;
    -h | *help) usage && exit ;;
    *) _dialog ;;
    esac

    return 0
}

main "$@"
