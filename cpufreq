#!/usr/bin/env bash

# ┏━╸┏━┓╻ ╻┏━╸┏━┓┏━╸┏━┓
# ┃  ┣━┛┃ ┃┣╸ ┣┳┛┣╸ ┃┓┃
# ┗━╸╹  ┗━┛╹  ╹┗╸┗━╸┗┻┛
#
# manage CPU frequency scaling
# * displays available scaling modes
# * displays current scaling governor
#
# deps: <notify-send>
# deps optional: <yad>

set -o errexit
set -o pipefail

PROG=$(basename "$0")
AVAILABLE="/sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors"
CURRENT=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor)
GOVERNOR=(/sys/devices/system/cpu/cpu*/cpufreq/scaling_governor)

# notification
DISPLAY=${DISPLAY:-:0}

# always ask password
sudo --askpass --reset-timestamp

# colors
RED=$(tput setaf 1)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
BOLD=$(tput bold)
WHITE=$(tput setaf 7)
RESET="$(tput sgr0)"

function help_modes {
    local scaling_available
    IFS=" " read -r -a scaling_available <<<"$(cat "$AVAILABLE")"
    for available in "${scaling_available[@]}"; do
        printf "    - %s\n" "$available"
    done
}

function usage {
    cat <<-_EOF
usage: $PROG [OPTIONS]

    Sets the cpu scaling mode

available:
$(help_modes)

options:
    -s, --set           Set mode <MODE>
    -c, --current       Display current governor
    -m, --menu          Display governors to chose
    -d, --dialog        Display a dialog to chose from
    -h, --help          Display this help and exit
_EOF
}

function log_err {
    local msg="$1"
    printf "%s: %s\n" "$PROG" "$msg" >&2
    exit 1
}

function logme {
    local msg="$1"
    local color="${2:-$BLUE}"
    printf "%s: %b%s%b\n" "$PROG" "$color" "$msg" "$RESET"
}

function send_notification {
    if [[ -z "$DISPLAY" ]]; then
        return
    fi

    if ! command -v notify-send >/dev/null; then
        logme "'notify-send' not found"
        return
    fi

    local prog
    local mesg="<b>$1</b>"
    local icon="${2:-dialog-warning}"
    local hints="string:x-canonical-private-synchronous:cpufreq"
    prog=$(echo "$PROG" | tr '[:lower:]' '[:upper:]')
    notify-send -r 666 -a "$PROG" -i "$icon" "$prog" "$mesg" -h "$hints"
}

function get_notification_icon {
    local mode="$1"
    if [[ "$mode" = "performance" ]]; then
        echo "power-profile-performance-symbolic"
        return
    fi

    echo "power-profile-power-saver-symbolic"
    return
}

function mode_available {
    local mode="$1"
    local scaling_available available
    IFS=" " read -r -a scaling_available <<<"$(cat "$AVAILABLE")"

    for available in "${scaling_available[@]}"; do
        if [[ "$mode" == "$available" ]]; then
            logme "mode '${mode}' is available" "$MAGENTA"
            return 0
        fi
    done

    logme "mode '$mode' not available" "$RED"
    mode_list

    return 1
}

function mode_list {
    local scaling_available
    IFS=" " read -r -a scaling_available <<<"$(cat "$AVAILABLE")"
    logme "available modes"
    for available in "${scaling_available[@]}"; do
        printf "  - %b%s%b\n" "$MAGENTA" "$available" "$RESET"
    done
}

function mode_check {
    local mode="$1"

    [[ -z "$mode" ]] && logme "err mode not found" "$RED" && exit 130

    if ! mode_available "$mode"; then
        return 1
    fi

    return 0
}

function mode_set {
    local mode="$1"

    if ! mode_check "$mode"; then
        return 1
    fi

    if [[ "$mode" = "$CURRENT" ]]; then
        logme "already in profile: $mode"
        send_notification "current: <i>$mode</i>" "$(get_notification_icon "$mode")"
        return
    fi

    logme "setting to '$mode' mode" "$BLUE"
    echo "$mode" | sudo -p "[sudo] setting to '$mode'  : " tee "${GOVERNOR[@]}" >/dev/null
    send_notification "setting profile: <i><b>$mode</b></i>" "$(get_notification_icon "$mode")"
}

function show_current {
    logme "$CURRENT"
}

function prompt {
    local color="$1"
    local mesg="$2"
    echo -ne "${color}${BOLD}${mesg}${RESET}"
}

function show_menu {
    local governors
    IFS=" " read -r -a governors <<<"$(cat "$AVAILABLE")"

    while true; do
        count=1

        prompt "${WHITE}" "select mode:\n"
        echo
        # show options
        for gov in "${governors[@]}"; do
            printf "  %s. %s\n" "$count" "$gov"
            count=$((count + 1))
        done

        prompt "${BLUE}" "\nenter choice: "
        read -r CHOSEN

        # set mode
        case "$CHOSEN" in
        [1-9] | [1-9][0-9] | [1-9][0-9][0-9])
            mode_set "${governors[$((CHOSEN - 1))]}"
            break
            ;;
        *) ;;
        esac
        clear
    done
}

function show_dialog {
    local scaling_available selection
    declare -a yad_args=(--title="Select Mode" --list --column="Mode")
    IFS=" " read -r -a scaling_available <<<"$(cat "$AVAILABLE")"

    if ! command -v yad >/dev/null; then
        log_err "'yad' not found"
    fi

    selection=$(yad "${yad_args[@]}" "${scaling_available[@]}" 2>/dev/null)

    [[ -z "$selection" ]] && log_err "action aborted"
    selection=${selection%?}

    mode_set "$selection"
}

function main {
    case "${1-}" in
    -s | *set) shift && mode_set "$@" ;;
    -c | *current) show_current ;;
    -m | *menu) show_menu ;;
    -d | *dialog) show_dialog ;;
    *) usage ;;
    esac

    return 0
}

main "$@"
