#!/usr/bin/env bash

# ┏━┓┏━┓┏━┓┏━┓┏┳┓┏━╸┏┓╻╻ ╻
# ┣━┛┣━┫┗━┓┗━┓┃┃┃┣╸ ┃┗┫┃ ┃
# ╹  ╹ ╹┗━┛┗━┛╹ ╹┗━╸╹ ╹┗━┛
# utils for password manager
# deps: <notify-send> <xdotool> <pass> <dmenu>

shopt -s nullglob globstar

# TODO:
# - [x] remove hex-colors, use names: red, blue...
# - [x] remove WAYLAND check
# - [ ] add fzf for tty usage

PROG="${0##*/}"
DEPS=(notify-send xdotool pass dmenu)
PASS=$(which pass)

# vars
# shellcheck disable=SC2034
EDITOR="nvim -u NONE"
TERMINAL=${TERMINAL:-st}
PASSWORD_STORE_CLIP_TIME=${PASSWORD_STORE_CLIP_TIME:-15}

# menu
MENU="dmenu"
declare -a MENU_ARGS=(-l 10)

# colors
BLUE="#458588"
MAGENTA="#D3869B"
RED="#FB4934"
YELLOW="#D79921"

function _usage {
    cat <<-EOF
Usage: $PROG [options]

options:
    -m, --menu      Select password with menu
    -e, --edit      Edit selected password
    -l, --list      List all passwords
    -o, --otp       Copy one-time-password
    -t, --type      Password is typed into the terminal
    -s, --show      Show selected password
    -h, --help      Show this help message and exit
EOF
    exit 0
}

function _notifyme {
    local prog
    local mesg="$1"
    local cmd=notify-send
    declare -a args=(-i "dialog-password-symbolic")
    args+=(-h "string:x-dunst-stack-tag:pass")
    args+=(-r 888)
    prog=$(echo "$PROG" | tr '[:lower:]' '[:upper:]')

    "$cmd" "${args[@]}" "$prog" "$mesg"
}

function _logerr {
    local mesg="$*"
    printf "%s: %s\n" "$PROG" "$mesg" >&2
    _notifyme "$mesg"
    exit 1
}

function _get_password_paths {
    local prefix=${PASSWORD_STORE_DIR-~/.password-store}
    local pwd_files
    pwd_files=("$prefix"/**/*.gpg)
    pwd_files=("${pwd_files[@]#"$prefix"/}")
    pwd_files=("${pwd_files[@]%.gpg}")
    printf '%s\n' "${pwd_files[@]}"
}

function _get_pass_with_menu {
    local prompt passwords
    declare -a passwords=()
    prompt="${1:-"Pass>"}"
    MENU_ARGS+=(-p "$prompt")
    shift

    if [[ -n "$*" && "$MENU" == "dmenu" ]]; then
        # shellcheck disable=SC2128
        MENU_ARGS+=("$@")
    fi

    mapfile -t passwords < <(_get_password_paths)
    password=$(printf "%s\n" "${passwords[@]}" | "$MENU" "${MENU_ARGS[@]}")
    echo "$password"
}

function _edit_pwd {
    shift
    local pwd="$1"

    if [[ -z "$pwd" ]]; then
        pwd=$(_get_pass_with_menu "PassEdit> " "-sb" "$RED")
    fi

    [[ -z $pwd ]] && exit

    $TERMINAL -e "$PASS" edit "$pwd"
    exit 0
}

function _menu {
    local icon=""
    local password mesg
    password=$(_get_pass_with_menu "${icon} Password> " "-sb" "$BLUE")

    [[ -z "${password}" ]] && exit

    "$PASS" show -c "$password" 2>/dev/null
    retcode=$?

    if [[ "$retcode" -ne 0 ]]; then
        _logerr "no password found for <i>'${password}'</i>"
    fi

    mesg="Copied $icon <b>${password}</b> to clipboard.\n\n"
    mesg+="<i>Will clear in <b>${PASSWORD_STORE_CLIP_TIME}</b> seconds.</i>"
    _notifyme "$mesg"
    exit 0
}

function _show_pwd {
    local icon=""
    local password mesg
    password=$(_get_pass_with_menu "${icon} Password> " "-sb" "$BLUE")

    [[ -z "${password}" ]] && exit

    "$PASS" show "$password" 2>/dev/null
    retcode=$?

    if [[ "$retcode" -ne 0 ]]; then
        _logerr "no password found for <i>'${password}'</i>"
    fi
}

function _list_path {
    local pwd_path
    local icon=""
    pwd_path=$(_get_pass_with_menu "${icon} PassList> " "-sb" "$YELLOW")
    [[ -z "${pwd_path}" ]] && exit
    echo "$pwd_path"
    exit 0
}

function _otp_code {
    local password mesg
    local icon=""
    password=$(_get_pass_with_menu "${icon} PassOTP> " "-sb" "$YELLOW")

    [[ -z "${password}" ]] && exit

    "$PASS" otp -c "${password}"
    retcode=$?

    if [[ "$retcode" -gt 0 ]]; then
        _logerr "no OTP found for ${password}"
    fi

    mesg="Copied $icon <b>OTP</b> code for <b>${password}</b> to clipboard.\n\n"
    mesg+="<i>Will clear in <b>${PASSWORD_STORE_CLIP_TIME}</b> seconds.</i>"
    _notifyme "$mesg"
    exit 0
}

function _type_pwd {
    shift
    local password="$1"
    local icon=" "
    local _xdotool="xdotool type --clearmodifiers --file -"

    if [[ -z "${password}" ]]; then
        password=$(_get_pass_with_menu "${icon} PassType>" "-sb" "$MAGENTA")
    fi

    [[ -z "${password}" ]] && exit

    "$PASS" show "$password" | {
        IFS= read -r pass
        printf %s "$pass"
    } | $_xdotool
    exit 0
}

# if [[ -n $WAYLAND_DISPLAY ]]; then
#     MENU="dmenu-wl"
#     XDOTOOL="ydotool type --file -"
# elif [[ -n $DISPLAY ]]; then
#     XDOTOOL="xdotool type --clearmodifiers --file -"
# else
#     _logerr "no <b>x11/wayland</b> display detected"
# fi

function _check_pass {
    local retcode
    "$PASS" >/dev/null
    retcode="$?"
    return "$retcode"
}

function _has {
    local verbose=false
    if [[ $1 == '-v' ]]; then
        verbose=true
        shift
    fi
    for c in "$@"; do
        c="${c%% *}"
        if ! command -v "$c" &>/dev/null; then
            [[ "$verbose" == true ]] && _logerr "'$c' dependency not found"
            return 1
        fi
    done
}

function main {
    _has -v "${DEPS[@]}"

    if ! _check_pass; then
        local errmsg="'pass' returned a <b>non-zero</b> code."
        _logerr "$errmsg"
    fi

    case "$1" in
    -m | --menu) _menu ;;
    -e | --edit) _edit_pwd "$@" ;;
    -l | --list) _list_path ;;
    -o | --otp) _otp_code ;;
    -t | --type) _type_pwd "$@" ;;
    -s | --show) _show_pwd ;;
    -h | --help) _usage ;;
    *) _menu ;;
    esac
}

main "$@"
