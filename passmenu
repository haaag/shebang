#!/usr/bin/env bash

# ┏━┓┏━┓┏━┓┏━┓┏┳┓┏━╸┏┓╻╻ ╻
# ┣━┛┣━┫┗━┓┗━┓┃┃┃┣╸ ┃┗┫┃ ┃
# ╹  ╹ ╹┗━┛┗━┛╹ ╹┗━╸╹ ╹┗━┛
# utils for password manager
# deps: <notify-send> <xdotool> <pass> <dmenu>

shopt -s nullglob globstar

set -ou pipefail

PROG="${0##*/}"
DEPS=(xdotool pass dmenu)
PASS=$(which pass)

# vars
# shellcheck disable=SC2034
EDITOR="nvim -u NONE"
TERMINAL=${TERMINAL:-st}
PASSWORD_STORE_CLIP_TIME=${PASSWORD_STORE_CLIP_TIME:-15}
FAVORITES=${PASSWORD_STORE_DIR:-~/.local/share/pass}/favorites
#                         

# menu
declare -A ICONS
ICONS["prompt"]=""
ICONS["add"]=""
ICONS["copy"]=""
ICONS["edit"]=""
ICONS["otp"]=""
ICONS["typed"]=""
ICONS["show"]=""
ICONS["favorite"]=""
ICONS["favorite_added"]=""
ICONS["action"]=""
ICONS["remove"]=""
ICONS["list"]=""

MENU=
PROMPT="${ICONS[prompt]} Pass> "
declare -a MENU_OPTS=()

# colors
BLUE="#458588"
MAGENTA="#D3869B"
RED="#FB4934"
YELLOW="#D79921"

function _usage {
    cat <<-EOF
Usage: $PROG [Options]

    pass helper

Options:
    -m, --menu      Select password with menu
    -a, --add       Add new password
    -f, --fav       Choose from favorites
    -e, --edit      Edit selected password
    -l, --list      List all passwords
    -o, --otp       Copy one-time-password
    -t, --type      Password is typed into the terminal
    -s, --show      Show selected password
    -h, --help      Show this help message and exit
EOF
    exit 0
}

function _notifyme {
    if ! _has notify-send; then
        return
    fi

    export DISPLAY=":0"
    local mesg="$1"
    local cmd=notify-send
    declare -a args=(-i "gtk-dialog-authentication")
    args+=(-h "string:x-dunst-stack-tag:pass")
    args+=(-r 888)

    "$cmd" "${args[@]}" "${PROG^^}" "$mesg"
}

function _logerr {
    local mesg="$*"
    printf "%s: %s\n" "$PROG" "$mesg" >&2
    _notifyme "$mesg"
    exit 1
}

function _logme {
    printf "%s: %s\n" "$PROG" "$1"
}

function _has {
    local verbose=false
    if [[ $1 == '-v' ]]; then
        verbose=true
        shift
    fi
    for c in "$@"; do
        c="${c%% *}"
        if ! command -v "$c" &>/dev/null; then
            [[ "$verbose" == true ]] && _logerr "'$c' dependency not found"
            return 1
        fi
    done
}

function _has_line {
    local pwd="$1"
    local file="$2"
    [[ -z "${pwd}" ]] && exit

    if ! grep -q "^$pwd$" "$file"; then
        return 1
    fi

    return 0
}

function _in_terminal {
    if [[ ! -t 1 ]]; then
        return 1
    fi
    return 0
}

# displays a menu with the given prompt and options, and returns the selected
# item
function _select {
    local prompt="${1:-"$PROMPT"}"
    local color="${2:-$BLUE}"
    local item
    shift
    shift
    local items=("$@")

    if [[ "$MENU" == "fzf" ]]; then
        MENU_OPTS+=(--prompt="$prompt")
        MENU_OPTS+=(--color="prompt:$color")
    else
        MENU_OPTS+=(-p "$prompt")
        MENU_OPTS+=(-sb "$color")
    fi

    _has -v "$MENU"

    item=$(printf "%s\n" "${items[@]}" | "$MENU" "${MENU_OPTS[@]}")
    echo "$item"
}

# simulates typing the given text using the xdotool command
function _typed {
    # TODO: add support for wayland
    local item="$1"
    [[ -z "$item" ]] && _logerr "typed: no item given"
    local _xdotool="xdotool type --clearmodifiers --file -"

    echo "$item" | {
        IFS= read -r item
        printf %s "$item"
    } | $_xdotool
}

# retrieves a list of all password paths stored in the password store directory
function _pwd_paths {
    local prefix=${PASSWORD_STORE_DIR-~/.password-store}
    local pwd_files
    pwd_files=("$prefix"/**/*.gpg)
    pwd_files=("${pwd_files[@]#"$prefix"/}")
    pwd_files=("${pwd_files[@]%.gpg}")
    printf '%s\n' "${pwd_files[@]}"
}

# find password fullpath in the stored
function _pwd_get_path {
    local pwd=$1
    [[ -z "$pwd" ]] && _logerr "find: no password given"

    local passwords
    mapfile -t passwords < <(_pwd_paths)
    for path in "${passwords[@]}"; do
        if [[ $path == *"$pwd" ]]; then
            echo "$path"
            return
        fi
    done

    echo
}

# displays a menu with the available password paths and returns the selected
# password path
function _pwd_select {
    local prompt="${1:-"$PROMPT"}"
    local color="${2:-$BLUE}"
    mapfile -t passwords < <(_pwd_paths)

    local pwd
    pwd=$(_select "$prompt" "$color" "${passwords[@]}")
    [[ -z "$pwd" ]] && exit
    echo "$pwd"
}

# edits the specified password in the password store using the configured
# password editor
function _pwd_edit {
    local pwd="$1"
    if [[ -z "$pwd" ]]; then
        pwd=$(_pwd_select "${ICONS[edit]} PassEdit> " "$RED")
    fi

    [[ -z $pwd ]] && exit

    if _in_terminal; then
        if [[ -n "${TMUX:-}" ]]; then
            tmux display-popup -E -w 65% -h 65% "$PASS edit $pwd"
        else
            "$PASS" edit "$pwd"
        fi
    else
        $TERMINAL -e "$PASS" edit "$pwd"
    fi
    exit 0
}

# copies password to clipboard
function _pwd_copy {
    local pwd="$1"
    [[ -z "${pwd}" ]] && _logerr "copy: no password given"

    "$PASS" show -c "$pwd" 2>/dev/null
    retcode=$?
    if [[ "$retcode" -ne 0 ]]; then
        _logerr "no password found for <i>'${pwd}'</i>"
    fi

    local mesg
    mesg="Copied <b>${pwd}</b> to clipboard.\n\n"
    mesg+="<i>Will clear in <b>${PASSWORD_STORE_CLIP_TIME}</b> seconds.</i>"
    _notifyme "$mesg"
    exit 0
}

# displays the specified password
function _pwd_show {
    local pwd="$1"
    if [[ -z "$pwd" ]]; then
        pwd=$(_pwd_select "${ICONS[show]} Password> " "$BLUE")
    fi
    [[ -z "${pwd}" ]] && exit

    if _in_terminal; then
        "$PASS" show "$pwd"
    else
        $TERMINAL -e "$PASS" show "$pwd"
    fi
    exit 0
}

# lists passwords in the password store
function _pwd_list {
    local pwd_path
    pwd_path=$(_pwd_select "${ICONS[list]} PassList> " "$YELLOW")
    [[ -z "${pwd_path}" ]] && exit
    echo "$pwd_path"
    exit 0
}

# retrieves and copies/types otp code
function _pwd_otp_code {
    # TODO: split me
    local icon="${ICONS[otp]}"
    local pwd="${1:-}"
    if [[ -z "${pwd}" ]]; then
        pwd=$(_pwd_select "${icon} PassOTP> " "$YELLOW")
    fi

    [[ -z "${pwd}" ]] && exit 1

    # check if otp exists
    local _otp
    _otp="$($PASS otp "$pwd")"
    local retcode=$?
    if [[ "$retcode" -gt 0 ]]; then
        _logerr "no OTP found for ${pwd}"
    fi

    # which action to perform?
    local _actions=("${ICONS[copy]} copy" "${ICONS[typed]} typed")
    local _action
    _action=$(_select "" "" "${_actions[@]}")

    [[ -z "${_action}" ]] && exit 1
    _action=$(echo "$_action" | awk '{print $2}')

    if [[ "$_action" = "typed" ]]; then
        _typed "$($PASS otp "$pwd")"
    else
        "$PASS" otp -c "${pwd}"
        local mesg="Copied <b>OTP</b> code for <b>${pwd}</b> to clipboard.\n\n"
        mesg+="<i>Will clear in <b>${PASSWORD_STORE_CLIP_TIME}</b> seconds.</i>"
        _notifyme "$mesg"
    fi

    exit 0
}

# types the password for the specified entry
function _pwd_type {
    local pwd="$1"
    if [[ -z "${pwd}" ]]; then
        pwd=$(_pwd_select "${ICONS[typed]} PassType>" "$MAGENTA")
    fi

    [[ -z "${pwd}" ]] && exit

    local item
    item=$("$PASS" show "$pwd")
    _typed "$item"
    exit 0
}

function _pwd_remove {
    local pwd="$1"
    [[ -z "${pwd}" ]] && exit
    echo "Not implemented yet: '$PASS rm $pwd'"
    # "$PASS" rm "$pwd"
    exit 0
}

# checks if the password-store command (pass) is available and functioning
# correctly
function _check_pass {
    local retcode
    "$PASS" >/dev/null
    retcode="$?"
    return "$retcode"
}

# performs password action
function _action {
    if [[ "$#" -ne 2 ]]; then
        _logerr "action: invalid number of arguments"
    fi

    local action="$1"
    local pwd="$2"

    case "$action" in
    edit) _pwd_edit "$pwd" ;;
    copy) _pwd_copy "$pwd" ;;
    otp) _pwd_otp_code "$pwd" ;;
    typed) _pwd_type "$pwd" ;;
    show) _pwd_show "$pwd" ;;
    favorite) _fav_add "$pwd" ;;
    remove) _pwd_remove "$pwd" ;;
    *) _logerr "invalid action: '$pwd'" ;;
    esac
}

# displays password action menu
function _select_action {
    local cmd
    local pwd="${1:-}"
    local color="${2:-$BLUE}"
    local prompt="${ICONS[action]} ${pwd}> "

    local options=()
    options+=("${ICONS[copy]} copy")
    options+=("${ICONS[edit]} edit")
    options+=("${ICONS[otp]} otp")
    options+=("${ICONS[show]} show")
    options+=("${ICONS[typed]} typed")
    if _has_line "$pwd" "$FAVORITES"; then
        options+=("${ICONS[favorite_added]} favorite")
    else
        options+=("${ICONS[favorite]} favorite")
    fi
    options+=("${ICONS[remove]} remove")

    cmd=$(_select "$prompt" "$color" "${options[@]}")
    if (printf '%s\n' "${options[@]}" | grep -x -q "$cmd"); then
        _action "$(echo "$cmd" | cut -d' ' -f2)" "$pwd"
    fi
}

# manages password favorites
function _fav_add {
    local pwd="$1"
    [[ -z "${pwd}" ]] && _logerr "fav: no password given"
    [[ ! -f "$FAVORITES" ]] && touch "$FAVORITES"

    if _has_line "$pwd" "$FAVORITES"; then
        _fav_remove "$pwd"
        return
    fi

    echo "$pwd" >>"$FAVORITES"
    _notifyme "fav: added <i>'${pwd}'</i> to favorites"
    _logme "password '${pwd}' added to favorites"
}

# removes password from favorites
function _fav_remove {
    local pwd="$1"
    [[ -z "${pwd}" ]] && exit
    [[ ! -f "$FAVORITES" ]] && _logerr "fav remove: file not found"

    local escaped_pwd
    escaped_pwd=$(printf '%s\n' "$pwd" | sed -e 's/[]\/$*.^[]/\\&/g')

    sed -i "/^${escaped_pwd}\$/d" "$FAVORITES"
    retcode=$?
    if [[ "$retcode" -ne 0 ]]; then
        _logerr "fav remove: failed to remove <i>'${pwd}'</i>"
    fi

    _notifyme "fav remove: removed <i>'${pwd}'</i>"
    _logme "password '${pwd}' removed from favorites"
}

# displays favorite passwords
function _fav_pwd {
    local pwd
    [[ -f "$FAVORITES" ]] || _logerr "fav: file not found"

    local items
    mapfile -t items < <(cat "$FAVORITES")
    pwd=$(_select "${ICONS[favorite]} Favorites> " "$YELLOW" "${items[@]}")

    _select_action "$pwd"
}

# displays password menu
function _menu {
    local pwd
    local prompt="${ICONS[prompt]} PassMenu> "
    if [[ -n "$1" ]]; then
        pwd=$(_pwd_get_path "$1")
        [[ -z "${pwd}" ]] && _logerr "password '$1' not found"
    else
        pwd=${1:-$(_pwd_select)}
    fi

    [[ -z "${pwd}" ]] && exit 1
    _select_action "$pwd"
}

# adds a password to the password store
function _add_pwd {
    echo "not implemented yet: '$PASS insert <name>'"
}

function main {
    _has -v "${DEPS[@]}"

    if ! _check_pass; then
        local errmsg="'pass' returned a <b>non-zero</b> code."
        _logerr "$errmsg"
    fi

    if _in_terminal && _has fzf; then
        MENU=fzf
        MENU_OPTS+=(--tmux "center,50%")
    elif _has dmenu; then
        MENU=dmenu
        MENU_OPTS+=(-l 10)
    elif _has rofi; then
        MENU=rofi
        MENU_OPTS+=(-dmenu)
        MENU_OPTS+=(-l 10)
    fi

    case "${1:-}" in
    -m | --menu)
        _menu "$1"
        ;;
    -a | --add | add)
        _add_pwd
        ;;
    -f | --fav | fav)
        shift
        _fav_pwd "$@"
        ;;
    -e | --edit | edit)
        shift
        _pwd_edit "$@"
        ;;
    -l | --list | list)
        _pwd_list
        ;;
    -o | --otp | otp)
        shift
        _pwd_otp_code "$@"
        ;;
    -t | --type)
        _pwd_type
        ;;
    -s | --show)
        shift
        _pwd_show "$@"
        ;;
    -h | --help)
        _usage
        ;;
    *) _menu "${1:-}" ;;
    esac

}

main "$@"
